package Models;

import Controlers.inventory;
import Views.Inventory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

//import static Controlers.inventory.id;

public class InventoryDbConnector {
    private static Connection connection;

    public InventoryDbConnector() {
        String url = "jdbc:mysql://j8oay8teq9xaycnm.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/your_database_name";
        String user = "w0i7yta26bznpg95";
        String password = "pwo8964ak69169uc";

        try {
            connection = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void addInventory(inventory inventory) {
        String sql = "INSERT INTO inventory(name, description, quantity, price, supplier) VALUES(?,?,?,?,?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, inventory.getName());
            preparedStatement.setString(2, inventory.getDescription());
            preparedStatement.setInt(3, inventory.getQuantity());
            preparedStatement.setFloat(4, inventory.getPrice());
            preparedStatement.setString(5, inventory.getSupplier());

            int rowsAffected = preparedStatement.executeUpdate();

            // Check if the insert was successful
            if (rowsAffected > 0) {
                // Retrieve the autogenerated ID
                ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int generatedId = generatedKeys.getInt(1);
                    System.out.println("Inventory details added to the database with ID: " + generatedId);
                    inventory.setId(generatedId); // Set the auto-incremented ID in the inventory object
                }

//                Inventory.showMessage("Product Added Successfully", "Success");
            } else {
                System.out.println("Failed to add inventory details.");
//                Inventory.showMessage("Product Addition Failed", "Error");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public static void updateInventory(int id, inventory updatedInventory) {
        String sql = "UPDATE inventory SET name=?, description=?, quantity=?, price=?, supplier=? WHERE id=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, updatedInventory.getName());
            preparedStatement.setString(2, updatedInventory.getDescription());
            preparedStatement.setInt(3, updatedInventory.getQuantity());
            preparedStatement.setFloat(4, updatedInventory.getPrice());
            preparedStatement.setString(5, updatedInventory.getSupplier());
            preparedStatement.setInt(6, id);

            int rowsAffected = preparedStatement.executeUpdate();

            // Check if the update was successful
            if (rowsAffected > 0) {
                System.out.println("Inventory details updated in the database.");
//                Inventory.showMessage("Inventory Updated Successfully", "Success");
            } else {
                System.out.println("Failed to update inventory details.");
//                Inventory.showMessage("Inventory Update Failed", "Error");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void deleteInventory(int id) {
        String sql = "DELETE FROM inventory WHERE id=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);

            int rowsAffected = preparedStatement.executeUpdate();

            // Check if the delete was successful
            if (rowsAffected > 0) {
                System.out.println("Inventory deleted from the database.");
//                Inventory.showMessage("Inventory Deleted Successfully", "Success");
            } else {
                System.out.println("Failed to delete inventory.");
//                Inventory.showMessage("Inventory Deletion Failed", "Error");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static List<inventory> getAllInventory() {
        List<inventory> inventoryList = new ArrayList<>();
        String sql = "SELECT * FROM inventory";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {

            while (resultSet.next()) {
//                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String description = resultSet.getString("description");
                int quantity = resultSet.getInt("quantity");
                float price = resultSet.getFloat("price");
                String supplier = resultSet.getString("supplier");

                inventory inventory = new inventory(name, description, quantity, price, supplier);
                inventoryList.add(inventory);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return inventoryList;
    }


    public static inventory getInventoryById(int selectedId) {
        inventory result = null;
        String sql = "SELECT * FROM inventory WHERE id=?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, selectedId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    String name = resultSet.getString("name");
                    String description = resultSet.getString("description");
                    int quantity = resultSet.getInt("quantity");
                    float price = resultSet.getFloat("price");
                    String supplier = resultSet.getString("supplier");

                    result = new inventory( name, description, quantity, price, supplier);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return result;
    }
    }
}
